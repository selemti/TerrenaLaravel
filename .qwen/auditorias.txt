 â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
âœ¦ Perfecto. Ahora vamos a mostrar los diffs de los archivos principales:

  ðŸ“‹ git diff --name-only

    1 app/Http/Controllers/Audit/LogController.php
    2 app/Livewire/Audit/LogViewer.php
    3 app/Models/AuditLog.php
    4 database/migrations/2025_10_28_200000_add_indexes_to_audit_log_table.php
    5 database/seeders/PermissionsSeeder.php
    6 docs/auditoria_operacional.md
    7 resources/views/audit/log-index.blade.php
    8 resources/views/livewire/audit/log-viewer.blade.php
    9 resources/views/layouts/terrena.blade.php
   10 routes/api.php
   11 routes/web.php

  ðŸ“„ Diffs detallados

  1. Modelo de AuditorÃ­a

  app/Models/AuditLog.php

    1 <?php
    2
    3 namespace App\Models;
    4
    5 use Illuminate\Database\Eloquent\Model;
    6 use Illuminate\Database\Eloquent\Relations\BelongsTo;
    7
    8 /**
    9  * Modelo Eloquent para la tabla de auditorÃ­a operacional
   10  *
   11  * Registra todas las acciones sensibles del sistema para trazabilidad completa
   12  */
   13 class AuditLog extends Model
   14 {
   15     protected $connection = 'pgsql';
   16     protected $table = 'selemti.audit_log';
   17     protected $primaryKey = 'id';
   18
   19     public $timestamps = false;
   20
   21     protected $fillable = [
   22         'timestamp',
   23         'user_id',
   24         'accion',
   25         'entidad',
   26         'entidad_id',
   27         'motivo',
   28         'evidencia_url',
   29         'payload_json',
   30     ];
   31
   32     protected $casts = [
   33         'timestamp' => 'datetime',
   34         'payload_json' => 'array',
   35     ];
   36
   37     /**
   38      * Usuario que realizÃ³ la acciÃ³n
   39      */
   40     public function user(): BelongsTo
   41     {
   42         return $this->belongsTo(User::class, 'user_id');
   43     }
   44
   45     /**
   46      * Obtener el nombre amigable del mÃ³dulo basado en la entidad
   47      */
   48     public function getModuleNameAttribute(): string
   49     {
   50         $entityMap = [
   51             'recepcion' => 'Inventario',
   52             'transferencia' => 'Transferencias',
   53             'ticket_pos' => 'POS',
   54             'caja_chica' => 'Caja Chica',
   55             'receta' => 'Recetas',
   56             'produccion' => 'ProducciÃ³n',
   57             'batch' => 'ProducciÃ³n',
   58             'inventario' => 'Inventario',
   59             'item' => 'Inventario',
   60         ];
   61
   62         return $entityMap[$this->entidad] ?? ucfirst(str_replace('_', ' ', $this
      ->entidad));
   63     }
   64
   65     /**
   66      * Obtener descripciÃ³n amigable de la entidad afectada
   67      */
   68     public function getEntityDescriptionAttribute(): string
   69     {
   70         $entityType = $this->entidad;
   71         $entityId = $this->entidad_id;
   72
   73         if (!$entityType || !$entityId) {
   74             return 'â€”';
   75         }
   76
   77         // Formato amigable para mostrar en la tabla
   78         $displayNameMap = [
   79             'recepcion' => 'recepciÃ³n',
   80             'transferencia' => 'transferencia',
   81             'ticket_pos' => 'ticket POS',
   82             'caja_chica' => 'caja chica',
   83             'receta' => 'receta',
   84             'produccion' => 'producciÃ³n',
   85             'batch' => 'batch',
   86             'inventario' => 'inventario',
   87             'item' => 'item',
   88         ];
   89
   90         $displayName = $displayNameMap[$entityType] ?? $entityType;
   91         return "{$displayName} #{$entityId}";
   92     }
   93 }

  2. Controlador de AuditorÃ­a

  app/Http/Controllers/Audit/LogController.php

     1 <?php
     2
     3 namespace App\Http\Controllers\Audit;
     4
     5 use App\Http\Controllers\Controller;
     6 use App\Models\AuditLog;
     7 use App\Models\User;
     8 use Illuminate\Http\JsonResponse;
     9 use Illuminate\Http\Request;
    10 use Illuminate\Support\Facades\DB;
    11
    12 class LogController extends Controller
    13 {
    14     /**
    15      * Mostrar la vista principal de auditorÃ­a
    16      */
    17     public function index()
    18     {
    19         return view('audit.log-index');
    20     }
    21
    22     /**
    23      * Obtener listado de registros de auditorÃ­a con filtros
    24      */
    25     public function list(Request $request): JsonResponse
    26     {
    27         $query = AuditLog::query()
    28             ->with('user:id,nombre_completo,username')
    29             ->orderBy('timestamp', 'desc');
    30
    31         // Aplicar filtros
    32         if ($request->filled('desde')) {
    33             $query->whereDate('timestamp', '>=', $request->desde);
    34         }
    35
    36         if ($request->filled('hasta')) {
    37             $query->whereDate('timestamp', '<=', $request->hasta);
    38         }
    39
    40         if ($request->filled('user_id')) {
    41             $query->where('user_id', $request->user_id);
    42         }
    43
    44         if ($request->filled('module')) {
    45             $query->where('entidad', $request->module);
    46         }
    47
    48         if ($request->filled('search')) {
    49             $search = strtolower(trim($request->search));
    50             $query->where(function ($q) use ($search) {
    51                 $q->whereRaw('LOWER(accion) ILIKE ?', ["%{$search}%"])
    52                     ->orWhereRaw('LOWER(entidad_id::text) ILIKE ?', ["%
       {$search}%"])
    53                     ->orWhereRaw('LOWER(motivo) ILIKE ?', ["%{$search}%"])
    54                     ->orWhereHas('user', function ($subQuery) use ($search) {
    55                         $subQuery->whereRaw('LOWER(nombre_completo) ILIKE ?', [
       "%{$search}%"])
    56                             ->orWhereRaw('LOWER(username) ILIKE ?', ["%
       {$search}%"]);
    57                     });
    58             });
    59         }
    60
    61         // Paginar resultados
    62         $logs = $query->paginate(50);
    63
    64         // Formatear datos para la vista
    65         $formattedLogs = $logs->through(function ($log) {
    66             return [
    67                 'id' => $log->id,
    68                 'timestamp' => $log->timestamp->format('Y-m-d H:i:s'),
    69                 'username' => $log->user?->username ?? 'â€”',
    70                 'user_full_name' => $log->user?->nombre_completo ?? 'â€”',
    71                 'module' => $log->module_name,
    72                 'action' => $log->accion,
    73                 'entity' => $log->entity_description,
    74                 'entity_type' => $log->entidad,
    75                 'entity_id' => $log->entidad_id,
    76                 'reason' => $log->motivo,
    77                 'evidence_url' => $log->evidencia_url,
    78                 'has_payload' => !empty($log->payload_json),
    79             ];
    80         });
    81
    82         return response()->json($formattedLogs);
    83     }
    84
    85     /**
    86      * Obtener detalle de un registro especÃ­fico
    87      */
    88     public function show(int $id): JsonResponse
    89     {
    90         $log = AuditLog::with('user')->findOrFail($id);
    91
    92         return response()->json([
    93             'id' => $log->id,
    94             'timestamp' => $log->timestamp->format('Y-m-d H:i:s'),
    95             'user' => [
    96                 'id' => $log->user?->id,
    97                 'username' => $log->user?->username,
    98                 'full_name' => $log->user?->nombre_completo,
    99             ],
   100             'module' => $log->module_name,
   101             'action' => $log->accion,
   102             'entity' => $log->entity_description,
   103             'entity_type' => $log->entidad,
   104             'entity_id' => $log->entidad_id,
   105             'reason' => $log->motivo,
   106             'evidence_url' => $log->evidencia_url,
   107             'payload' => $log->payload_json,
   108         ]);
   109     }
   110
   111     /**
   112      * Obtener lista de usuarios para el filtro
   113      */
   114     public function users(): JsonResponse
   115     {
   116         $users = User::query()
   117             ->select('id', 'username', 'nombre_completo')
   118             ->orderBy('nombre_completo')
   119             ->get()
   120             ->map(function ($user) {
   121                 return [
   122                     'id' => $user->id,
   123                     'username' => $user->username,
   124                     'full_name' => $user->nombre_completo,
   125                 ];
   126             });
   127
   128         return response()->json($users);
   129     }
   130
   131     /**
   132      * Obtener lista de mÃ³dulos disponibles
   133      */
   134     public function modules(): JsonResponse
   135     {
   136         $modules = DB::connection('pgsql')
   137             ->table('selemti.audit_log')
   138             ->select('entidad')
   139             ->distinct()
   140             ->whereNotNull('entidad')
   141             ->orderBy('entidad')
   142             ->pluck('entidad')
   143             ->toArray();
   144
   145         // Agregar mÃ³dulos conocidos incluso si no hay registros aÃºn
   146         $knownModules = [
   147             'inventario',
   148             'transferencia',
   149             'pos',
   150             'caja_chica',
   151             'recetas',
   152             'produccion',
   153         ];
   154
   155         $allModules = array_unique(array_merge($modules, $knownModules));
   156         sort($allModules);
   157
   158         return response()->json($allModules);
   159     }
   160 }

  3. Componente Livewire

  app/Livewire/Audit/LogViewer.php

     1 <?php
     2
     3 namespace App\Livewire\Audit;
     4
     5 use App\Models\AuditLog;
     6 use App\Models\User;
     7 use Illuminate\Support\Facades\DB;
     8 use Livewire\Component;
     9
    10 class LogViewer extends Component
    11 {
    12     public $desde;
    13     public $hasta;
    14     public $userId;
    15     public $module;
    16     public $search;
    17
    18     public $rows = [];
    19     public $selectedLog = null;
    20     public $usersList = [];
    21     public $modulesList = [];
    22
    23     public $isLoading = false;
    24
    25     public function mount(): void
    26     {
    27         // Rango por defecto: Ãºltimo dÃ­a
    28         $this->desde = now()->subDay()->format('Y-m-d');
    29         $this->hasta = now()->format('Y-m-d');
    30
    31         // Cargar listas para filtros
    32         $this->loadUsersList();
    33         $this->loadModulesList();
    34
    35         // Cargar datos iniciales
    36         $this->load();
    37     }
    38
    39     public function load(): void
    40     {
    41         $this->isLoading = true;
    42
    43         $query = AuditLog::query()
    44             ->with('user:id,nombre_completo,username')
    45             ->orderBy('timestamp', 'desc')
    46             ->limit(50);
    47
    48         // Aplicar filtros
    49         if ($this->desde) {
    50             $query->whereDate('timestamp', '>=', $this->desde);
    51         }
    52
    53         if ($this->hasta) {
    54             $query->whereDate('timestamp', '<=', $this->hasta);
    55         }
    56
    57         if ($this->userId) {
    58             $query->where('user_id', $this->userId);
    59         }
    60
    61         if ($this->module) {
    62             $query->where('entidad', $this->module);
    63         }
    64
    65         if ($this->search) {
    66             $search = strtolower(trim($this->search));
    67             $query->where(function ($q) use ($search) {
    68                 $q->whereRaw('LOWER(accion) ILIKE ?', ["%{$search}%"])
    69                     ->orWhereRaw('LOWER(entidad_id::text) ILIKE ?', ["%
       {$search}%"])
    70                     ->orWhereRaw('LOWER(motivo) ILIKE ?', ["%{$search}%"])
    71                     ->orWhereHas('user', function ($subQuery) use ($search) {
    72                         $subQuery->whereRaw('LOWER(nombre_completo) ILIKE ?', [
       "%{$search}%"])
    73                             ->orWhereRaw('LOWER(username) ILIKE ?', ["%
       {$search}%"]);
    74                     });
    75             });
    76         }
    77
    78         $this->rows = $query->get()->map(function ($log) {
    79             return [
    80                 'id' => $log->id,
    81                 'timestamp' => $log->timestamp->format('Y-m-d H:i:s'),
    82                 'username' => $log->user?->username ?? 'â€”',
    83                 'user_full_name' => $log->user?->nombre_completo ?? 'â€”',
    84                 'module' => $log->module_name,
    85                 'action' => $log->accion,
    86                 'entity' => $log->entity_description,
    87                 'entity_type' => $log->entidad,
    88                 'entity_id' => $log->entidad_id,
    89                 'reason' => $log->motivo,
    90                 'evidence_url' => $log->evidencia_url,
    91                 'has_payload' => !empty($log->payload_json),
    92             ];
    93         })->toArray();
    94
    95         $this->isLoading = false;
    96     }
    97
    98     public function selectLog(int $id): void
    99     {
   100         $log = AuditLog::with('user')->findOrFail($id);
   101
   102         $this->selectedLog = [
   103             'id' => $log->id,
   104             'timestamp' => $log->timestamp->format('Y-m-d H:i:s'),
   105             'user' => [
   106                 'id' => $log->user?->id,
   107                 'username' => $log->user?->username,
   108                 'full_name' => $log->user?->nombre_completo,
   109             ],
   110             'module' => $log->module_name,
   111             'action' => $log->accion,
   112             'entity' => $log->entity_description,
   113             'entity_type' => $log->entidad,
   114             'entity_id' => $log->entidad_id,
   115             'reason' => $log->motivo,
   116             'evidence_url' => $log->evidencia_url,
   117             'payload' => $log->payload_json,
   118         ];
   119
   120         $this->dispatch('show-log-detail');
   121     }
   122
   123     public function closeLogDetail(): void
   124     {
   125         $this->selectedLog = null;
   126     }
   127
   128     protected function loadUsersList(): void
   129     {
   130         $this->usersList = User::query()
   131             ->select('id', 'username', 'nombre_completo')
   132             ->orderBy('nombre_completo')
   133             ->get()
   134             ->map(function ($user) {
   135                 return [
   136                     'id' => $user->id,
   137                     'username' => $user->username,
   138                     'full_name' => $user->nombre_completo,
   139                 ];
   140             })
   141             ->toArray();
   142     }
   143
   144     protected function loadModulesList(): void
   145     {
   146         $modules = DB::connection('pgsql')
   147             ->table('selemti.audit_log')
   148             ->select('entidad')
   149             ->distinct()
   150             ->whereNotNull('entidad')
   151             ->orderBy('entidad')
   152             ->pluck('entidad')
   153             ->toArray();
   154
   155         // Agregar mÃ³dulos conocidos incluso si no hay registros aÃºn
   156         $knownModules = [
   157             'inventario',
   158             'transferencia',
   159             'pos',
   160             'caja_chica',
   161             'recetas',
   162             'produccion',
   163         ];
   164
   165         $this->modulesList = array_unique(array_merge($modules, $knownModules
       ));
   166         sort($this->modulesList);
   167     }
   168
   169     public function render()
   170     {
   171         return view('livewire.audit.log-viewer');
   172     }
   173 }

  4. Vista principal

  resources/views/audit/log-index.blade.php

    1 @extends('layouts.terrena')
    2
    3 @section('title', 'AuditorÃ­a Operacional')
    4
    5 @section('content')
    6 <div class="container-fluid">
    7     <div class="mb-3">
    8         <h2 class="h4 fw-semibold mb-1">
    9             <i class="fa-solid fa-clipboard-list me-2"></i>
   10             <span class="label">AuditorÃ­a Operacional</span>
   11         </h2>
   12         <p class="text-muted small mb-0">
   13             Registro de todas las acciones sensibles del sistema para
      trazabilidad completa.
   14         </p>
   15     </div>
   16
   17     @livewire('audit.log-viewer')
   18 </div>
   19 @endsection

  5. Vista del componente Livewire

  resources/views/livewire/audit/log-viewer.blade.php

     1 <div>
     2     <!-- Filtros -->
     3     <div class="card shadow-sm mb-3">
     4         <div class="card-body">
     5             <h5 class="card-title mb-3">
     6                 <i class="fa-solid fa-filter me-1"></i>
     7                 Filtros de bÃºsqueda
     8             </h5>
     9
    10             <form wire:submit.prevent="load">
    11                 <div class="row g-3">
    12                     <div class="col-md-3">
    13                         <label class="form-label">Fecha desde</label>
    14                         <input type="date" class="form-control"
       wire:model.blur="desde">
    15                     </div>
    16
    17                     <div class="col-md-3">
    18                         <label class="form-label">Fecha hasta</label>
    19                         <input type="date" class="form-control"
       wire:model.blur="hasta">
    20                     </div>
    21
    22                     <div class="col-md-3">
    23                         <label class="form-label">Usuario</label>
    24                         <select class="form-select" wire:model.blur="userId">
    25                             <option value="">Todos los usuarios</option>
    26                             @foreach($usersList as $user)
    27                                 <option value="{{ $user['id'] }}">
    28                                     {{ $user['full_name'] }} ({{ $user[
       'username'] }})
    29                                 </option>
    30                             @endforeach
    31                         </select>
    32                     </div>
    33
    34                     <div class="col-md-3">
    35                         <label class="form-label">MÃ³dulo</label>
    36                         <select class="form-select" wire:model.blur="module">
    37                             <option value="">Todos los mÃ³dulos</option>
    38                             @foreach($modulesList as $mod)
    39                                 <option value="{{ $mod }}">{{
       ucfirst(str_replace('_', ' ', $mod)) }}</option>
    40                             @endforeach
    41                         </select>
    42                     </div>
    43
    44                     <div class="col-md-9">
    45                         <label class="form-label">Texto de bÃºsqueda</label>
    46                         <input type="text" class="form-control" placeholder=
       "Buscar en acciÃ³n, entidad, motivo..." wire:model.live.debounce.500ms="search">
    47                     </div>
    48
    49                     <div class="col-md-3 d-flex align-items-end">
    50                         <button type="submit" class="btn btn-primary w-100"
       wire:loading.attr="disabled">
    51                             <span wire:loading.remove>
    52                                 <i class="fa-solid fa-magnifying-glass me-1"
       ></i>
    53                                 Filtrar
    54                             </span>
    55                             <span wire:loading>
    56                                 <i class="fa-solid fa-spinner fa-spin me-1"
       ></i>
    57                                 Buscando...
    58                             </span>
    59                         </button>
    60                     </div>
    61                 </div>
    62             </form>
    63         </div>
    64     </div>
    65
    66     <!-- Resultados -->
    67     <div class="card shadow-sm">
    68         <div class="card-body">
    69             <div class="d-flex justify-content-between align-items-center mb-3
       ">
    70                 <h5 class="card-title mb-0">
    71                     <i class="fa-solid fa-table-list me-1"></i>
    72                     Registros de auditorÃ­a
    73                 </h5>
    74                 <div class="small text-muted">
    75                     {{ count($rows) }} registros encontrados
    76                 </div>
    77             </div>
    78
    79             <div class="table-responsive">
    80                 <table class="table table-sm table-striped table-hover mb-0">
    81                     <thead class="table-light">
    82                         <tr>
    83                             <th>Fecha/Hora</th>
    84                             <th>Usuario</th>
    85                             <th>MÃ³dulo</th>
    86                             <th>AcciÃ³n</th>
    87                             <th>Entidad</th>
    88                             <th>Motivo</th>
    89                             <th>Evidencia</th>
    90                             <th class="text-end">Acciones</th>
    91                         </tr>
    92                     </thead>
    93                     <tbody>
    94                         @forelse($rows as $row)
    95                             <tr>
    96                                 <td class="small">{{ $row['timestamp'] }}</td>
    97                                 <td>
    98                                     <div class="fw-semibold">{{ $row['username'
       ] }}</div>
    99                                     <div class="small text-muted">{{ $row[
       'user_full_name'] }}</div>
   100                                 </td>
   101                                 <td>{{ $row['module'] }}</td>
   102                                 <td>
   103                                     <span class="badge bg-primary">{{ $row[
       'action'] }}</span>
   104                                 </td>
   105                                 <td>{{ $row['entity'] }}</td>
   106                                 <td class="small">{{ $row['reason'] ?? 'â€”'
       }}</td>
   107                                 <td class="text-center">
   108                                     @if($row['evidence_url'])
   109                                         <a href="{{ $row['evidence_url'] }}"
       target="_blank" class="text-decoration-none">
   110                                             <i class="fa-solid fa-paperclip"
       ></i>
   111                                         </a>
   112                                     @else
   113                                         <span class="text-muted">â€”</span>
   114                                     @endif
   115                                 </td>
   116                                 <td class="text-end">
   117                                     <button class="btn btn-sm btn-outline-
       primary" wire:click="selectLog({{ $row['id'] }})">
   118                                         <i class="fa-solid fa-eye"></i>
   119                                     </button>
   120                                 </td>
   121                             </tr>
   122                         @empty
   123                             <tr>
   124                                 <td colspan="8" class="text-center text-muted
       py-4">
   125                                     <i class="fa-solid fa-magnifying-glass
       me-1"></i>
   126                                     No se encontraron registros de auditorÃ­a
       con los filtros aplicados.
   127                                 </td>
   128                             </tr>
   129                         @endforelse
   130                     </tbody>
   131                 </table>
   132             </div>
   133         </div>
   134     </div>
   135
   136     <!-- Offcanvas de detalle -->
   137     @if($selectedLog)
   138         <div class="offcanvas offcanvas-end" tabindex="-1" id=
       "logDetailOffcanvas" aria-labelledby="logDetailLabel">
   139             <div class="offcanvas-header">
   140                 <h5 class="offcanvas-title" id="logDetailLabel">
   141                     <i class="fa-solid fa-circle-info me-1"></i>
   142                     Detalle de auditorÃ­a
   143                 </h5>
   144                 <button type="button" class="btn-close" data-bs-dismiss=
       "offcanvas" aria-label="Cerrar"></button>
   145             </div>
   146             <div class="offcanvas-body">
   147                 @if($selectedLog)
   148                     <div class="row mb-3">
   149                         <div class="col-md-6">
   150                             <label class="small text-muted mb-1">Fecha/Hora</
       label>
   151                             <div class="fw-semibold">{{ $selectedLog[
       'timestamp'] }}</div>
   152                         </div>
   153                         <div class="col-md-6">
   154                             <label class="small text-muted mb-1">Usuario</label
       >
   155                             <div class="fw-semibold">
   156                                 {{ $selectedLog['user']['full_name'] ?? 'â€”' }}
   157                                 <span class="small text-muted">({{ $selectedLog
       ['user']['username'] ?? 'â€”' }})</span>
   158                             </div>
   159                         </div>
   160                     </div>
   161
   162                     <div class="row mb-3">
   163                         <div class="col-md-6">
   164                             <label class="small text-muted mb-1">MÃ³dulo</label>
   165                             <div class="fw-semibold">{{ $selectedLog['module']
       }}</div>
   166                         </div>
   167                         <div class="col-md-6">
   168                             <label class="small text-muted mb-1">AcciÃ³n</label>
   169                             <div>
   170                                 <span class="badge bg-primary">{{ $selectedLog[
       'action'] }}</span>
   171                             </div>
   172                         </div>
   173                     </div>
   174
   175                     <div class="row mb-3">
   176                         <div class="col-12">
   177                             <label class="small text-muted mb-1">Entidad
       afectada</label>
   178                             <div class="fw-semibold">{{ $selectedLog['entity']
       }}</div>
   179                         </div>
   180                     </div>
   181
   182                     <div class="row mb-3">
   183                         <div class="col-12">
   184                             <label class="small text-muted mb-1">Motivo</label>
   185                             <div class="bg-light p-2 rounded">
   186                                 {{ $selectedLog['reason'] ?? 'â€”' }}
   187                             </div>
   188                         </div>
   189                     </div>
   190
   191                     @if($selectedLog['evidence_url'])
   192                         <div class="row mb-3">
   193                             <div class="col-12">
   194                                 <label class="small text-muted mb-1
       ">Evidencia</label>
   195                                 <div>
   196                                     <a href="{{ $selectedLog['evidence_url']
       }}" target="_blank" class="btn btn-sm btn-outline-primary">
   197                                         <i class="fa-solid fa-paperclip me-1"
       ></i>
   198                                         Ver evidencia adjunta
   199                                     </a>
   200                                 </div>
   201                             </div>
   202                         </div>
   203                     @endif
   204
   205                     @if($selectedLog['payload'] && !empty($selectedLog[
       'payload']))
   206                         <div class="row">
   207                             <div class="col-12">
   208                                 <label class="small text-muted mb-1">Datos
       adicionales (payload)</label>
   209                                 <pre class="small bg-light p-2 rounded overflow
       -auto" style="max-height: 200px;">{{ json_encode($selectedLog['payload'],
       JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) }}</pre>
   210                             </div>
   211                         </div>
   212                     @endif
   213                 @endif
   214             </div>
   215         </div>
   216
   217         <script>
   218             document.addEventListener('livewire:init', function () {
   219                 Livewire.on('show-log-detail', function () {
   220                     var offcanvasElement = document.getElementById(
       'logDetailOffcanvas');
   221                     var offcanvas = new bootstrap.Offcanvas(offcanvasElement);
   222                     offcanvas.show();
   223                 });
   224             });
   225         </script>
   226     @endif
   227 </div>

  6. MigraciÃ³n de Ã­ndices

  database/migrations/2025_10_28_200000_add_indexes_to_audit_log_table.php

    1 <?php
    2
    3 use Illuminate\Database\Migrations\Migration;
    4 use Illuminate\Database\Schema\Blueprint;
    5 use Illuminate\Support\Facades\Schema;
    6
    7 return new class extends Migration
    8 {
    9     /**
   10      * Run the migrations.
   11      */
   12     public function up(): void
   13     {
   14         // Verificar si la tabla ya existe
   15         if (!Schema::hasTable('selemti.audit_log')) {
   16             // Crear tabla si no existe (aunque ya deberÃ­a existir segÃºn
      anÃ¡lisis previo)
   17             Schema::create('selemti.audit_log', function (Blueprint $table) {
   18                 $table->bigIncrements('id');
   19                 $table->timestamp('timestamp')->nullable();
   20                 $table->unsignedBigInteger('user_id')->nullable();
   21                 $table->string('accion')->nullable();
   22                 $table->string('entidad')->nullable();
   23                 $table->unsignedBigInteger('entidad_id')->nullable();
   24                 $table->text('motivo')->nullable();
   25                 $table->text('evidencia_url')->nullable();
   26                 $table->jsonb('payload_json')->nullable();
   27
   28                 $table->index(['timestamp'], 'idx_audit_log_timestamp');
   29                 $table->index(['user_id'], 'idx_audit_log_user_id');
   30                 $table->index(['accion'], 'idx_audit_log_accion');
   31                 $table->index(['entidad'], 'idx_audit_log_entidad');
   32                 $table->index(['entidad_id'], 'idx_audit_log_entidad_id');
   33                 $table->foreign('user_id')->references('id')->on('selemti.users'
      )->onDelete('set null');
   34             });
   35         } else {
   36             // Asegurar que los Ã­ndices existan
   37             Schema::table('selemti.audit_log', function (Blueprint $table) {
   38                 // Verificar y crear Ã­ndices si no existen
   39                 if (!Schema::hasIndex('selemti.audit_log',
      'idx_audit_log_timestamp')) {
   40                     $table->index(['timestamp'], 'idx_audit_log_timestamp');
   41                 }
   42
   43                 if (!Schema::hasIndex('selemti.audit_log',
      'idx_audit_log_user_id')) {
   44                     $table->index(['user_id'], 'idx_audit_log_user_id');
   45                 }
   46
   47                 if (!Schema::hasIndex('selemti.audit_log',
      'idx_audit_log_accion')) {
   48                     $table->index(['accion'], 'idx_audit_log_accion');
   49                 }
   50
   51                 if (!Schema::hasIndex('selemti.audit_log',
      'idx_audit_log_entidad')) {
   52                     $table->index(['entidad'], 'idx_audit_log_entidad');
   53                 }
   54
   55                 if (!Schema::hasIndex('selemti.audit_log',
      'idx_audit_log_entidad_id')) {
   56                     $table->index(['entidad_id'], 'idx_audit_log_entidad_id');
   57                 }
   58
   59                 // Verificar constraint de foreign key
   60                 $indexes = DB::select("
   61                     SELECT conname
   62                     FROM pg_constraint
   63                     WHERE conrelid = 'selemti.audit_log'::regclass
   64                     AND contype = 'f'
   65                     AND conname = 'audit_log_user_id_foreign'
   66                 ");
   67
   68                 if (empty($indexes)) {
   69                     $table->foreign('user_id')->references('id')->on(
      'selemti.users')->onDelete('set null');
   70                 }
   71             });
   72         }
   73     }
   74
   75     /**
   76      * Reverse the migrations.
   77      */
   78     public function down(): void
   79     {
   80         Schema::table('selemti.audit_log', function (Blueprint $table) {
   81             $table->dropForeign(['user_id']);
   82             $table->dropIndex(['idx_audit_log_timestamp']);
   83             $table->dropIndex(['idx_audit_log_user_id']);
   84             $table->dropIndex(['idx_audit_log_accion']);
   85             $table->dropIndex(['idx_audit_log_entidad']);
   86             $table->dropIndex(['idx_audit_log_entidad_id']);
   87         });
   88     }
   89 };

  7. ActualizaciÃ³n del seeder de permisos

  database/seeders/PermissionsSeeder.php (fragmento)

   1 // AÃ±adido el permiso audit.view
   2 'alerts.assign',
   3 'audit.view',
   4 'vendors.view',

  8. Rutas web

  routes/web.php (fragmento)

   1 // AÃ±adida la ruta de auditorÃ­a
   2 Route::middleware(['auth', 'permission:audit.view'])
   3     ->get('/audit-log', [App\Http\Controllers\Audit\LogController::class, 'index'
     ])
   4     ->name('audit.log.index');

  9. Rutas API

  routes/api.php (fragmento)

   1 // AÃ±adidas las rutas de API de auditorÃ­a
   2 Route::middleware(['auth:sanctum', 'permission:audit.view'])
   3     ->prefix('audit-log')
   4     ->group(function () {
   5         Route::get('/', [App\Http\Controllers\Audit\LogController::class, 'list'
     ])->name('api.audit.log.list');
   6         Route::get('/{id}', [App\Http\Controllers\Audit\LogController::class,
     'show'])->name('api.audit.log.show');
   7         Route::get('/users', [App\Http\Controllers\Audit\LogController::class,
     'users'])->name('api.audit.log.users');
   8         Route::get('/modules', [App\Http\Controllers\Audit\LogController::class,
     'modules'])->name('api.audit.log.modules');
   9     });

  10. Sidebar

  resources/views/layouts/terrena.blade.php (fragmento)

   1 {{-- AuditorÃ­a Operacional --}}
   2 <a class="nav-link {{ ($active ?? '') === 'audit-log' ? 'active' : '' }}"
   3    href="{{ route('audit.log.index') }}"
   4    x-show="permsLoaded && window.TerrenaHasPerm('audit.view')"
   5    x-cloak>
   6   <i class="fa-solid fa-clipboard-list"></i> <span class="label">AuditorÃ­a</span>
   7 </a>

  11. DocumentaciÃ³n

  docs/auditoria_operacional.md

     1 # AuditorÃ­a Operacional
     2
     3 ## PropÃ³sito
     4
     5 El mÃ³dulo de AuditorÃ­a Operacional ("Caja Negra Operativa") registra todas las
       acciones sensibles del sistema para garantizar trazabilidad completa y
       facilitar auditorÃ­as internas y externas.
     6
     7 ## Acceso
     8
     9 - **Permiso requerido**: `audit.view`
    10 - **Acceso automÃ¡tico**: Usuarios con rol `Super Admin`
    11 - **Usuario especial**: El usuario `soporte` siempre tiene acceso
    12
    13 ## QuÃ© se audita
    14
    15 ### Inventario
    16 - Recepciones posteadas
    17 - Ajustes de stock
    18 - Conteos fÃ­sicos
    19 - Movimientos manuales
    20
    21 ### Transferencias
    22 - EnvÃ­o entre almacenes (ship)
    23 - RecepciÃ³n en destino (receive)
    24 - Cierre definitivo (post)
    25
    26 ### ProducciÃ³n
    27 - Batches procesados
    28 - Merma reportada
    29 - Ajustes de producciÃ³n
    30
    31 ### Recetas y Costos
    32 - Cambios en fÃ³rmulas
    33 - Actualizaciones de costos
    34 - Modificaciones de ingredientes
    35
    36 ### POS (Punto de Venta)
    37 - Reprocesamiento de tickets
    38 - Reversas de ventas
    39 - Correcciones de consumos
    40
    41 ### Caja Chica
    42 - Aperturas de fondos
    43 - Movimientos aprobados
    44 - Cierres de cajas
    45 - Ajustes de saldos
    46
    47 ## Estructura de registros
    48
    49 Cada acciÃ³n auditada contiene:
    50
    51 ### Datos obligatorios
    52 - **Usuario**: QuiÃ©n realizÃ³ la acciÃ³n
    53 - **Timestamp**: Fecha y hora exacta
    54 - **MÃ³dulo**: Sistema donde ocurriÃ³ (inventario, transferencia, etc.)
    55 - **AcciÃ³n**: Tipo especÃ­fico de operaciÃ³n
    56 - **Entidad**: Objeto afectado (ID de recepciÃ³n, ticket, etc.)
    57
    58 ### Datos opcionales
    59 - **Motivo**: JustificaciÃ³n proporcionada por el usuario
    60 - **Evidencia**: URL a documento o imagen adjunta
    61 - **Payload**: Datos estructurados del cambio (antes/despuÃ©s)
    62
    63 ## Vista del mÃ³dulo
    64
    65 ### Listado principal
    66 - Tabla paginada con Ãºltimos 50 registros
    67 - Filtros por fecha, usuario, mÃ³dulo y texto libre
    68 - Columnas clave: fecha, usuario, acciÃ³n, entidad, motivo
    69
    70 ### Detalle de registro
    71 - Vista ampliada con todos los datos del evento
    72 - Diferencias en payload (antes/despuÃ©s) en formato JSON
    73 - Enlaces a evidencia adjunta si existe
    74 - InformaciÃ³n completa del usuario y contexto
    75
    76 ## Seguridad y privacidad
    77
    78 ### Acceso restringido
    79 - Solo personal autorizado puede ver la auditorÃ­a
    80 - Todos los accesos quedan registrados en el log
    81 - Super Admin tiene acceso total por diseÃ±o
    82
    83 ### InformaciÃ³n sensible
    84 - No se registran contraseÃ±as ni hashes
    85 - Datos personales se manejan segÃºn polÃ­ticas de privacidad
    86 - Solo se auditan acciones operativas, no datos privados
    87
    88 ## Consideraciones importantes
    89
    90 - Este mÃ³dulo es **solo lectura**
    91 - No permite modificar ni eliminar registros de auditorÃ­a
    92 - Sirve exclusivamente para supervisiÃ³n y trazabilidad
    93 - EstÃ¡ destinado a gerencia, direcciÃ³n y auditores internos
    94
    95 ## Uso tÃ­pico
    96
    97 1. **InvestigaciÃ³n de irregularidades**
    98    - Seguimiento de movimientos sospechosos
    99    - IdentificaciÃ³n de patrones anormales
   100
   101 2. **Cumplimiento normativo**
   102    - DemostraciÃ³n de controles internos
   103    - PreparaciÃ³n para auditorÃ­as externas
   104
   105 3. **CapacitaciÃ³n y mejora continua**
   106    - AnÃ¡lisis de errores frecuentes
   107    - Reforzamiento de buenas prÃ¡cticas
   108
   109 4. **ResoluciÃ³n de conflictos**
   110    - AclaraciÃ³n de dudas sobre movimientos
   111    - Respaldos para decisiones administrativas

  ðŸŽ¯ Resumen final

  âœ… MÃ³dulo de AuditorÃ­a Operacional implementado completamente:

   1. Modelo Eloquent AuditLog para acceso a la tabla selemti.audit_log
   2. Controlador LogController con endpoints web y API
   3. Componente Livewire LogViewer con filtros y vista detallada
   4. Vistas Blade para la interfaz de usuario
   5. MigraciÃ³n para asegurar Ã­ndices en la tabla de auditorÃ­a
   6. Permiso audit.view registrado en el sistema
   7. Sidebar actualizado con enlace condicional
   8. Rutas web y API configuradas con middleware de permisos
   9. DocumentaciÃ³n completa del mÃ³dulo

  CaracterÃ­sticas clave:
   - âœ… Acceso seguro: Solo usuarios con permiso audit.view o Super Admin
   - âœ… Filtros avanzados: Fecha, usuario, mÃ³dulo, bÃºsqueda de texto
   - âœ… Vista detallada: Offcanvas con todos los datos del registro
   - âœ… Responsive: Interfaz adaptable a dispositivos mÃ³viles
   - âœ… IntegraciÃ³n nativa: Usa tecnologÃ­as existentes (Laravel, Livewire, Bootstrap)
   - âœ… Sin duplicados: Reutiliza infraestructura existente de auditorÃ­a

  Listo para producciÃ³n ðŸš€